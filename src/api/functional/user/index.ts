/**
 * @packageDocumentation
 * @module api.functional.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { __type } from ".prisma/client/index";
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { __type } from "../../../../core/types/base-entity";
import type { ICreateUserDto, IDeleteUserDto, IUpdateUserDto } from "../../../../libs/user/src/user.service";

/**
 * @controller UserController.create
 * @path POST /user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    createUserDto: create.Input,
): Promise<create.Output> {
    return PlainFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...create.METADATA,
            path: create.path(),
        } as const,
        createUserDto,
    );
}
export namespace create {
    export type Input = Primitive<ICreateUserDto>;
    export type Output = Primitive<string>;

    export const METADATA = {
        method: "POST",
        path: "/user",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/user`;
    }
}

/**
 * @controller UserController.read
 * @path PATCH /user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function read(
    connection: IConnection,
    readUserDto: read.Input,
): Promise<read.Output> {
    return PlainFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...read.METADATA,
            path: read.path(),
        } as const,
        readUserDto,
    );
}
export namespace read {
    export type Input = Primitive<__type & __type>;
    export type Output = Primitive<string>;

    export const METADATA = {
        method: "PATCH",
        path: "/user",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/user`;
    }
}

/**
 * @controller UserController.update
 * @path PUT /user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
    connection: IConnection,
    updateUserDto: update.Input,
): Promise<update.Output> {
    return PlainFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...update.METADATA,
            path: update.path(),
        } as const,
        updateUserDto,
    );
}
export namespace update {
    export type Input = Primitive<IUpdateUserDto>;
    export type Output = Primitive<string>;

    export const METADATA = {
        method: "PUT",
        path: "/user",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/user`;
    }
}

/**
 * @controller UserController.delete
 * @path DELETE /user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function $delete(
    connection: IConnection,
    deleteUserDto: $delete.Input,
): Promise<$delete.Output> {
    return PlainFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...$delete.METADATA,
            path: $delete.path(),
        } as const,
        deleteUserDto,
    );
}
export namespace $delete {
    export type Input = Primitive<IDeleteUserDto>;
    export type Output = Primitive<string>;

    export const METADATA = {
        method: "DELETE",
        path: "/user",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/user`;
    }
}